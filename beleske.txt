============ 061:
1. resolution switching - large screen, small screen, smanjiti rezoluciju slike na manjim ekranima
2. density switching - @2x screen (high resolution), @1x screen (low resolution), ako zelimo da slika bude ostrija, treba da dabldujemo broj piksela, smanjiti rezoluciju slike na @1x
3. art direction - large screen, small screen, razlicita slika na manjem ekranu

u ovom projektu u cssu ucitavamo slike koje kor za background.

DENCITY DESCRIPTORS - imamo 2 slike, svaka za posebnu rezoluciju (1x, 2x). Sa DENCITY descriptorom (tj 1x, 2x), i time dozvoljavamo browseru da izabere koju sliku ce da koristi u odnosu na korisnikov ekran

ART DIRECTION - da kazemo browseru da koristi jednu sliku za jedan screen, drugu za drugi screen, i za to koristimo <picture></picture>. U media atributu (u <source>) mozemo staviti media-query css. I browser koristi ove slike u slucaju da je phone screen tj max-width: 37.5em, a ako nije, onda kositi slike iz ovog img elementa.
<picture><source srcset media><img srcset/></picture> - uvek treba da koristimo bar jedan <img/> ovde, i nula ili vise <sources>


============ 062:
Kako da dozvolimo browseru da odluci koja slika je najbolja za download, koristeci SRCSET atribut, sa descriptorom, i sa SIZES atributon <img/> elementa
RESOLUTION I DENSITY SWITCHING u jednom. Ovde sad ne koristimo density descriptor vec WIDTH descrtiptor, oni ugl informisu browser o width-u slika, bez da mora da ih prethodno downloaduje pa sam skonta width, medjutim on ovo ne moze da proceni bez SIZES atributa. Sizes se koristi da informisemo browser o pribliznom widthu slike, i razlicitog viewporta, dakle u SIZES ide lista nekoliko breakpointova.
<img srcset="img/nat-1.jpg 300w, img/nat-1-large.jpg 1000w"
                                 sizes="(max-width: 900px) 20vw, (max-width: 600px) 30vw, 300px"
                                 alt="Photo 1"
                                 class="composition__photo composition__photo--p1"
                                 src="img/nat-1-large.jpg"/>
171/900 = 0.19 tj 20% od viewporta tj 20vw, widthSlike/brekapoint = % tj vw, 
171/600 = 30% tj 30vw
i  treci 300px tj difoltni, ukoliko se ni jedan od prethodnih ne apply. Takodje, treba da stavimo i src atribut za one korisnike ciji browser ne podrzava srcset i sl
Btw, stavljamo i src atribtu za slucaj da browser ne podrzava srcset atribute, no ukoliko browser razume srcset, ovaj src se ignorise


============ 063:
Visoka rezolucija, inace, i tel imaju visoku rezoluciju valjda, tj 2x, ali njima ne treba slika sa visokom rezolucijom, tako da smo jos stavili i da ova 2x slika bude ucitana za sve ekrane vece od 600px (od telefona i tab-porta).
Dakle slika sa visokom rezolucijom se primeni ako je ekran visoke rezolucije (2x +) i ako je veci od 600px, ili ako je veci od 2000px (bilo da je 1x, 2x, 3x). I da, promeni u em, ne u pixele, tj 600/16 = 37.5em, 2000/16 = 125em
     @media (min-resolution: 192dpi) and (min-width: 37.5em), (min-width: 125em) { //slika kvalitentija }


============ 064:
caniuse.com - provera modern css propertyja
@SUPPORTS, BACKDROP-FILTER
BACKDROP-FILTER - stavlja filter pozadi elementa koji je selektovan, recimo blurovanje pozadine (ne slike, vec klasicnog diva), radi samo u safariju, dakle blurovanje umesto, recimo, zatamnjivanje (govorimo o nasem pop-upu u ovom projektu)


============ 065:
1. main.sass 
    <COMPILATION>
2. style.comp.css
    <CONCATENATION>
3. style.concat.css, icon-font.css; npm install concat --save-dev, kucaj na netu
    <PREFIXING>
4. style.prefix.css
    <COMPRESING>
5. style.css - production code, konacan css kod spreman za hostovanje

package.json:
"scripts": {
    "watch:sass": "node-sass sass/main.scss css/style.css -w", = ovo ime prvo u "" moze biti koje god, watch, gledac, pratitelj, i tako svugde

    "devserver": "live-server", => npm install live-server -g, globalno instalirali, a globalno znaci da ga necemo videti u ovom package.json, jer je on negde na kompu valjda 
    
    "start": "npm-run-all --parallel devserver watch:sass", => npm install npm-run-all --save-dev, ovo --parallel znaci da paralelno pokrecemo i liveserver i sass watcher

    "compile:sass": "node-sass sass/main.scss css/style.comp.css", => 

    "concat:css": "concat -o css/style.concat.css css/icon-font.css css/style.comp.css", => npm install concat --save-dev, ovo :css je na koji tip koda se odnosi/primenjuje, concat -o (output) <output.css> (i sad idu inputi) <jedan.css> <drugi.css> <treci.css> ...

    "prefix:css": "postcss --use autoprefixer -b  \"last 10 versions\" css/style.concat.css -o css/style.prefix.css", => npm install postcss-cli --save-dev jer je autoprefixer koristi preko njega, pa npm install autoprefixer --save-dev, postcss --use autoprefixer -b (browsers) <koliko posl browsera zelimo da se ispisu prefixeri> (OBRATI PAZNJU NA \"last 10 versions\", izbacivao mi error) <inputFile> -o <outputFile>

    "compress:css": "node-sass css/style.prefix.css css/style.css --output-style compressed", => node-sass <inputFile> <outputFile> --output-style compressed (ovim samo kompresuje kod, nebitno da l je sass il css, il sta god da je hteo da kaze)

    "build:css": "npm-run-all compile:sass concat:css prefix:css compress:css" => npm install npm-run-all --save-dev, npm-run-all <i sad sve redom tasks koje zelimo da se odrade preko build:css komande>
  },



  ============ 066: